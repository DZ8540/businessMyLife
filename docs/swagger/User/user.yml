/api/user:
  get:
    tags:
      - User
    summary: Paginate users
    security:
      - bearerAuth: []
    parameters:
      - $ref: '#/components/parameters/Page'

      - $ref: '#/components/parameters/Limit'
      - $ref: '#/components/parameters/OrderBy'
      - $ref: '#/components/parameters/OrderByColumn'

      # * Query parameters

      - $ref: '#/components/parameters/Query'
    responses:
      200:
        allOf:
          - $ref: '#/components/responses/Success'
          - content:
              application/json:
                schema:
                  type: object
                  properties:
                    body:
                      allOf:
                        - $ref: '#/components/schemas/Pagination'
                        - type: object
                          properties:
                            data:
                              type: array
                              items:
                                $ref: '#/components/schemas/User'
      400:
        $ref: '#/components/responses/ClientError'
      500:
        $ref: '#/components/responses/ServerError'

/api/user/{id}/{currentUserId?}:
  get:
    tags:
      - User
    summary: Get user
    parameters:
      - in: path
        name: id
        schema: { $ref: '#/components/schemas/Id' }
        required: true
      - in: path
        name: currentUserId
        schema: { $ref: '#/components/schemas/Id' }
        required: false
    responses:
      200:
        allOf:
          - $ref: '#/components/responses/Success'
          - content:
              application/json:
                schema:
                  type: object
                  properties:
                    body:
                      $ref: '#/components/schemas/User'
      400:
        $ref: '#/components/responses/ClientError'
      500:
        $ref: '#/components/responses/ServerError'
  patch:
    tags:
      - User
    summary: Update user data
    security:
      - bearerAuth: []
    parameters:
      - in: path
        name: id
        schema: { $ref: '#/components/schemas/Id' }
        required: true
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              isShowEmail: { $ref: '#/components/schemas/UserIsShowEmail' }
              isShowPhone: { $ref: '#/components/schemas/UserIsShowPhone' }
              type: { $ref: '#/components/schemas/UserType' }

              firstName: { $ref: '#/components/schemas/UserFirstName' }
              lastName: { $ref: '#/components/schemas/UserLastName' }
              patronymic: { $ref: '#/components/schemas/UserPatronymic' }

              city: { $ref: '#/components/schemas/UserCity' }
              phone: { $ref: '#/components/schemas/UserPhone' }
              avatar: { $ref: '#/components/schemas/Image' }

              taxpayerIdentificationNumber: { $ref: '#/components/schemas/UserTIN' }
              mainStateRegistrationNumber: { $ref: '#/components/schemas/UserMSRN' }
              legalAddress: { $ref: '#/components/schemas/UserLegalAddress' }
              companyName: { $ref: '#/components/schemas/UserCompanyName' }
              birthday: { $ref: '#/components/schemas/UserBirthday' }
    responses:
      200:
        allOf:
          - $ref: '#/components/responses/Success'
          - content:
              application/json:
                schema:
                  type: object
                  properties:
                    body:
                      $ref: '#/components/schemas/User'
      400:
        $ref: '#/components/responses/ClientError'
      500:
        $ref: '#/components/responses/ServerError'

/api/user/updatePassword/{currentUserId}:
  patch:
    tags:
      - User
    summary: Update user password
    security:
      - bearerAuth: []
    parameters:
      - in: path
        name: currentUserId
        schema: { $ref: '#/components/schemas/Id' }
        required: true
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              oldPassword: { $ref: '#/components/schemas/UserPassword' }
              password: { $ref: '#/components/schemas/UserPassword' }
              passwordConfirm: { $ref: '#/components/schemas/UserPassword' }
    responses:
      200:
        $ref: '#/components/responses/Success'
      400:
        $ref: '#/components/responses/ClientError'
      500:
        $ref: '#/components/responses/ServerError'

components:
  schemas:
    User:
      type: object
      properties:
        id: { $ref: '#/components/schemas/Id' }
        isShowEmail: { $ref: '#/components/schemas/UserIsShowEmail' }
        isShowPhone: { $ref: '#/components/schemas/UserIsShowPhone' }
        type: { $ref: '#/components/schemas/UserType' }

        firstName: { $ref: '#/components/schemas/UserFirstName' }
        lastName: { $ref: '#/components/schemas/UserLastName' }
        patronymic: { $ref: '#/components/schemas/UserPatronymic' }

        email: { $ref: '#/components/schemas/UserEmail' }
        birthday: { $ref: '#/components/schemas/UserBirthday' }
        city: { $ref: '#/components/schemas/UserCity' }
        phone: { $ref: '#/components/schemas/UserPhone' }
        avatar: { $ref: '#/components/schemas/Image' }
        hobby: { $ref: '#/components/schemas/UserHobby' }

        taxpayerIdentificationNumber: { $ref: '#/components/schemas/UserTIN' }
        mainStateRegistrationNumber: { $ref: '#/components/schemas/UserMSRN' }
        legalAddress: { $ref: '#/components/schemas/UserLegalAddress' }
        placeOfWork: { $ref: '#/components/schemas/UserPlaceOfWork' }
        companyName: { $ref: '#/components/schemas/UserCompanyName' }
        experienceType: { $ref: '#/components/schemas/UserExperienceType' }

        roleId: { $ref: '#/components/schemas/UserRoleId' }

        createdAt: { $ref: '#/components/schemas/CreatedAt' }
        updatedAt: { $ref: '#/components/schemas/UpdatedAt' }
        blockedUntil: { $ref: '#/components/schemas/UserBlockedUntil' }

        favoriteOffersCount: { $ref: '#/components/schemas/UserFavoriteOffersCount' }

        fullName: { $ref: '#/components/schemas/UserFullName' }
        createdAtForUser: { $ref: '#/components/schemas/CreatedAtForUser' }
        blockedUntilForUser: { $ref: '#/components/schemas/UserBlockedUntilForUser' }
        experienceTypeForUser: { $ref: '#/components/schemas/UserExperienceTypeForUser' }
        birthdayForUser: { $ref: '#/components/schemas/UserBirthdayForUser' }
        roleForUser: { $ref: '#/components/schemas/UserRoleForUser' }
        typeForUser: { $ref: '#/components/schemas/UserTypeForUser' }

        friendStatus: { $ref: '#/components/schemas/UserFriendStatus' }
        outgoingStatus: { $ref: '#/components/schemas/UserOutgoingStatus' }
        incomingStatus: { $ref: '#/components/schemas/UserIncomingStatus' }

    # * Columns

    UserIsShowEmail:
      type: boolean
      required: false

    UserIsShowPhone:
      type: boolean
      required: false

    UserFirstName:
      type: string
      minLength: 2
      maxLength: 255
      required: true
      description: Min 2, max 255

    UserLastName:
      type: string
      minLength: 2
      maxLength: 255
      required: true
      description: Min 2, max 255

    UserPatronymic:
      type: string
      minLength: 2
      maxLength: 255
      required: false
      nullable: true
      description: Min 2, max 255

    UserEmail:
      type: string
      format: email
      required: true
      description: Only lowercase

    UserPassword:
      type: string
      minLength: 8
      maxLength: 50
      required: true
      format: password
      description: Should be with one uppercase letter and one number

    UserTIN:
      type: integer
      nullable: true
      required: false
      description: Tax id

    UserMSRN:
      type: integer
      nullable: true
      required: false
      description: Main state registration number

    UserLegalAddress:
      type: string
      nullable: true
      required: false

    UserPlaceOfWork:
      type: string
      nullable: true
      required: false

    UserCompanyName:
      type: string
      minLength: 2
      maxLength: 255
      required: false
      description: Only for individual entrepreneur and LLC

    UserExperienceType:
      type: integer
      minimum: 0
      maximum: 4
      nullable: true
      required: false

    UserBirthday:
      type: string
      format: date
      nullable: true
      required: false

    UserCity:
      type: string
      nullable: true
      required: false

    UserPhone:
      type: string
      format: phone
      nullable: true
      required: false

    UserHobby:
      type: string
      nullable: true
      required: false

    UserType:
      type: integer
      minimum: 0
      maximum: 2
      required: true
      description: |-
        0 - физ лицо
        1 - ип
        2 - ООО

    UserRoleId:
      type: integer
      minimum: 1

    UserBlockedUntil:
      type: string
      format: date-time

    # * Aggregates

    UserFavoriteOffersCount:
      type: integer
      required: false
      nullable: true

    # * Computed properties

    UserFullName:
      type: string
      description: First name + last name + patronymic

    UserUpdatedAtForUser: { type: string }

    UserBlockedUntilForUser: { type: string }

    UserExperienceTypeForUser:
      type: string
      description: Type in string

    UserBirthdayForUser: { type: string }

    UserRoleForUser:
      type: string
      description: Type in string

    UserTypeForUser:
      type: string
      description: Type in string

    UserFriendStatus:
      type: boolean
      description: It shows, if you give current user id to path. It will be true, if current user is friend with user, which you take

    UserOutgoingStatus:
      type: boolean
      description: It shows, if you give current user id to path. It will be true, if current user sended request to friends to user, which you take

    UserIncomingStatus:
      type: boolean
      description: It shows, if you give current user id to path. It will be true, if user, which you take, sended request to friends to current user
